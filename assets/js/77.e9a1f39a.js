(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{545:function(a,t,s){"use strict";s.r(t);var e=s(42),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"mutacoes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutacoes"}},[a._v("#")]),a._v(" Mutações")]),a._v(" "),s("div",{staticClass:"scrimba"},[s("a",{attrs:{href:"https://scrimba.com/p/pnyzgAP/ckMZp4HN",target:"_blank",rel:"noopener noreferrer"}},[a._v("Tente esta lição no Scrimba")])]),a._v(" "),s("p",[a._v("A única maneira de realmente mudar de estado em um "),s("em",[a._v("store")]),a._v(" Vuex é por confirmar (ou fazer "),s("em",[a._v("commit")]),a._v(" de) uma mutação. As mutações do Vuex são muito semelhantes aos eventos: cada mutação tem uma cadeia de caracteres "),s("strong",[a._v("tipo")]),a._v(" e um "),s("strong",[a._v("manipulador")]),a._v(". A função do manipulador é onde realizamos modificações de estado reais e ele receberá o estado como o 1º argumento:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" store "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Vuex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  state"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    count"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  mutations"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("increment")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// muda o estado")]),a._v("\n      state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("count"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v('Você não pode chamar diretamente um manipulador de mutação. Pense nisso mais como registro de evento: "Quando uma mutação com o tipo '),s("em",[a._v("increment")]),a._v(' é acionada, chame este manipulador." Para invocar um manipulador de mutação, você precisa chamar '),s("em",[a._v("store.commit")]),a._v(" com seu tipo:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'increment'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"commit-com-payload"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-com-payload"}},[a._v("#")]),a._v(" Commit com Payload")]),a._v(" "),s("p",[a._v("Você pode passar um argumento adicional para o "),s("em",[a._v("store.commit")]),a._v(", que é chamado de "),s("strong",[s("em",[a._v("payload")])]),a._v(" para a mutação:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\nmutations"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("increment")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'increment'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Na maioria dos casos, o "),s("em",[a._v("payload")]),a._v(" deve ser um objeto para que possa conter vários campos, e a mutação gravada também será mais descritiva:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\nmutations"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("increment")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" payload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amount\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'increment'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"confirmacao-ou-commit-estilo-objeto"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#confirmacao-ou-commit-estilo-objeto"}},[a._v("#")]),a._v(" Confirmação (ou Commit) Estilo-Objeto")]),a._v(" "),s("p",[a._v("Uma maneira alternativa de confirmar (ou fazer um "),s("em",[a._v("commit")]),a._v(" de) uma mutação é usando diretamente um objeto que tenha uma propriedade "),s("code",[a._v("type")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'increment'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Ao usar a Confirmação Estilo-Objeto, o objeto inteiro será passado como o "),s("em",[a._v("payload")]),a._v(" para os manipuladores de mutação, portanto, o manipulador permanecerá o mesmo:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("mutations"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("increment")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" payload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amount\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"mutacoes-seguem-as-regras-de-reatividade-do-vue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutacoes-seguem-as-regras-de-reatividade-do-vue"}},[a._v("#")]),a._v(" Mutações Seguem as Regras de Reatividade do Vue")]),a._v(" "),s("p",[a._v("Como o estado de um "),s("em",[a._v("store")]),a._v(" Vuex é reativado pelo Vue, quando alteramos o estado, os componentes do Vue observando o estado serão atualizados automaticamente. Isso também significa que as mutações do Vuex estão sujeitas às mesmas ressalvas de reatividade ao trabalhar com o Vue simples:")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("Prefira inicializar o estado inicial do seu "),s("em",[a._v("store")]),a._v(" com todos os campos desejados antecipadamente.")])]),a._v(" "),s("li",[s("p",[a._v("Ao adicionar novas propriedades a um Objeto, você deve:")])])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Usar "),s("code",[a._v("Vue.set(obj, 'newProp', 123)")]),a._v(", ou")])]),a._v(" "),s("li",[s("p",[a._v("Substitua esse objeto por um novo. Por exemplo, usando o "),s("a",{attrs:{href:"https://github.com/tc39/proposal-object-rest-spread",target:"_blank",rel:"noopener noreferrer"}},[a._v("object spread syntax"),s("OutboundLink")],1),a._v(" nós podemos escrevê-lo assim:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" newProp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"usando-constantes-para-tipos-de-mutacao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usando-constantes-para-tipos-de-mutacao"}},[a._v("#")]),a._v(" Usando Constantes para Tipos de Mutação")]),a._v(" "),s("p",[a._v("É um padrão comumente visto usar constantes para tipos de mutação em várias implementações do "),s("em",[a._v("Flux")]),a._v(". Isso permite que o código aproveite as ferramentas como os "),s("em",[a._v("linters")]),a._v(", e colocar todas as constantes em um único arquivo permite que seus colaboradores tenham uma visão geral das mutações possíveis em todo o aplicativo:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// mutation-types.js")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("SOME_MUTATION")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'SOME_MUTATION'")]),a._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// store.js")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Vuex "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("from")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'vuex'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("SOME_MUTATION")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("from")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'./mutation-types'")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" store "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Vuex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  state"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  mutations"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// podemos usar o recurso de nome do dado computado do ES2015")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// para usar uma constante como o nome da função")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("SOME_MUTATION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// muda o estado")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Se usar constantes é em grande parte uma preferência - pode ser útil em grandes projetos com muitos desenvolvedores, mas é totalmente opcional se você não gostar deles.")]),a._v(" "),s("h3",{attrs:{id:"mutacoes-devem-ser-sincronas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutacoes-devem-ser-sincronas"}},[a._v("#")]),a._v(" Mutações Devem Ser Síncronas")]),a._v(" "),s("p",[a._v("Uma regra importante a lembrar é que "),s("strong",[a._v("as funções do manipulador de mutação devem ser síncronas")]),a._v(". Por quê? Considere o seguinte exemplo:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("mutations"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("someMutation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("callAsyncMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("count"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v('Agora imagine que estamos depurando o aplicativo e observando os logs de mutação do devtool. Para cada mutação registrada, o devtool precisará capturar os momentos "antes" e "depois" do estado. No entanto, o '),s("em",[a._v("callback")]),a._v(" assíncrono dentro da mutação de exemplo acima torna isso impossível: o "),s("em",[a._v("callback")]),a._v(" ainda não é chamado quando a mutação é confirmada (ou o "),s("em",[a._v("commit")]),a._v(" da mutação é feito) e não há como o devtool saber quando o "),s("em",[a._v("callback")]),a._v(" será realmente chamado - qualquer mutação de estado executada no "),s("em",[a._v("callback")]),a._v(" é essencialmente impossível de rastrear!")]),a._v(" "),s("h3",{attrs:{id:"confirmando-ou-fazendo-commits-de-mutacoes-em-componentes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#confirmando-ou-fazendo-commits-de-mutacoes-em-componentes"}},[a._v("#")]),a._v(" Confirmando (ou fazendo Commits de) Mutações em Componentes")]),a._v(" "),s("p",[a._v("Você pode confirmar (ou fazer "),s("em",[a._v("commit")]),a._v(" de) mutações em componentes com "),s("code",[a._v("this.$store.commit('xxx')")]),a._v(", ou use o auxiliar "),s("code",[a._v("mapMutations")]),a._v(" que mapeia métodos de componentes para chamadas "),s("em",[a._v("store.commit")]),a._v(" (requer injeção "),s("em",[a._v("store")]),a._v(" raiz):")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" mapMutations "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("from")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'vuex'")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n  methods"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mapMutations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'increment'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// mapeia `this.increment()` para `this.$store.commit('increment')`")]),a._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// `mapMutations` também suporta payloads:")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'incrementBy'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// mapeia `this.incrementBy(amount)` para `this.$store.commit('incrementBy', amount)`")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mapMutations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      add"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'increment'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// mapeia `this.add()` para `this.$store.commit('increment')`")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"vamos-as-acoes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vamos-as-acoes"}},[a._v("#")]),a._v(" Vamos as Ações")]),a._v(" "),s("p",[a._v("Assincronia combinada com mutação de estado pode tornar seu programa muito difícil de ser compreendido. Por exemplo, quando você chama dois métodos com "),s("em",[a._v("callbacks")]),a._v(" assíncronos que alteram o estado, como você sabe quando eles são chamados e qual "),s("em",[a._v("callback")]),a._v(" foi chamado primeiro? É exatamente por isso que queremos separar os dois conceitos. No Vuex, "),s("strong",[a._v("mutações são transações síncronas")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'increment'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// qualquer mudança de estado que a mutação "increment" pode causar')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// deve ser feito neste momento.")]),a._v("\n")])])]),s("p",[a._v("Para lidar com operações assíncronas, vamos apresentar "),s("RouterLink",{attrs:{to:"/ptbr/guide/actions.html"}},[a._v("Ações")]),a._v(".")],1)])}),[],!1,null,null,null);t.default=n.exports}}]);