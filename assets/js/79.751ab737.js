(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{547:function(t,a,s){"use strict";s.r(a);var e=s(42),o=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"estado"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#estado"}},[t._v("#")]),t._v(" Estado")]),t._v(" "),s("h3",{attrs:{id:"arvore-unica-de-estado"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arvore-unica-de-estado"}},[t._v("#")]),t._v(" Árvore Única de Estado")]),t._v(" "),s("div",{staticClass:"scrimba"},[s("a",{attrs:{href:"https://scrimba.com/p/pnyzgAP/cWw3Zhb",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tente esta lição no Scrimba")])]),t._v(" "),s("p",[t._v("O Vuex usa uma "),s("strong",[t._v("árvore única de estado")]),t._v(' - ou seja, esse único objeto contém todo o estado do seu nível de aplicação e serve como a "única fonte da verdade". Isso também significa que você terá apenas um '),s("em",[t._v("store")]),t._v(" para cada aplicativo. Uma árvore única de estado facilita a localização de uma parte específica do estado, e permite capturar facilmente momentos do estado atual do aplicativo para fins de depuração.")]),t._v(" "),s("p",[t._v("A árvore única de estado não entra em conflito com a modularidade - em capítulos posteriores, discutiremos como dividir seu estado e mutações em sub-módulos.")]),t._v(" "),s("p",[t._v("O tipo de dados guardados no Vuex segue as mesmas regras que "),s("code",[t._v("data")]),t._v(" em instâncias Vue, ou seja o "),s("em",[t._v("state")]),t._v(" têm de ser um objeto simples. "),s("a",{attrs:{href:"https://br.vuejs.org/v2/api/index.html#data",target:"_blank",rel:"noopener noreferrer"}},[t._v("Detalhes"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"obtendo-o-estado-vuex-nos-componentes-vue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#obtendo-o-estado-vuex-nos-componentes-vue"}},[t._v("#")]),t._v(" Obtendo o Estado Vuex nos Componentes Vue")]),t._v(" "),s("p",[t._v("Então, como exibimos o estado dentro do "),s("em",[t._v("store")]),t._v(" em nossos componentes Vue? Uma vez que os "),s("em",[t._v("stores")]),t._v(' Vuex são reativos, a maneira mais simples de "recuperar" o estado é simplesmente retornar algum estado do '),s("em",[t._v("store")]),t._v(" dentro de um "),s("a",{attrs:{href:"https://br.vuejs.org/v2/guide/computed.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("dado computado"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vamos criar um componente de Contador")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Counter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<div>{{ count }}</div>")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  computed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Sempre que o "),s("em",[t._v("store.state.count")]),t._v(" muda, fará com que o dado computado seja reavaliado e ative as atualizações de "),s("em",[t._v("DOM")]),t._v(" associadas.")]),t._v(" "),s("p",[t._v("No entanto, esse padrão faz com que o componente dependa do "),s("em",[t._v("store")]),t._v(" "),s("em",[t._v("singleton")]),t._v(" global. Ao usar um sistema de módulo, ele precisa importar o "),s("em",[t._v("store")]),t._v(" em todos os componentes que usam o estado do "),s("em",[t._v("store")]),t._v(" e também requer "),s("em",[t._v("mocking")]),t._v(" ao testar o componente.")]),t._v(" "),s("p",[t._v('O Vuex fornece um mecanismo para "injetar" o '),s("em",[t._v("store")]),t._v(" em todos os componentes filho do componente raiz com a opção "),s("em",[t._v("store")]),t._v(" (habilitada por "),s("code",[t._v("Vue.use(Vuex)")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" app "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// fornece o store usando a opção "store".')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// isso irá injetar a instância do store em todos os componentes filhos.")]),t._v("\n  store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  components"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Counter "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\n    <div class="app">\n      <counter></counter>\n    </div>\n  ')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Ao fornecer a opção "),s("em",[t._v("store")]),t._v(" para a instância raiz, o "),s("em",[t._v("store")]),t._v(" será injetado em todos os componentes filho da raiz e estará disponível neles como "),s("code",[t._v("this.$store")]),t._v(". Vamos atualizar a nossa implementação "),s("em",[t._v("Counter")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Counter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<div>{{ count }}</div>")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  computed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"o-auxiliar-mapstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#o-auxiliar-mapstate"}},[t._v("#")]),t._v(" O Auxiliar "),s("code",[t._v("mapState")])]),t._v(" "),s("div",{staticClass:"scrimba"},[s("a",{attrs:{href:"https://scrimba.com/p/pnyzgAP/c8Pz7BSK",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tente esta lição no Scrimba")])]),t._v(" "),s("p",[t._v("Quando um componente precisa fazer uso de várias propriedades do estado do "),s("em",[t._v("store")]),t._v(" ou "),s("em",[t._v("getters")]),t._v(", declarar todos esses dados computados pode ser repetitivo e verboso. Para lidar com isso, podemos usar o auxiliar "),s("code",[t._v("mapState")]),t._v(" que gera funções "),s("em",[t._v("getter")]),t._v(" computadas para nós, economizando algumas linhas de código:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// em builds completos, os auxiliares são expostos como Vuex.mapState")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mapState "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vuex'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  computed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// As arrow functions (ou funções de seta) podem tornar o código muito sucinto!")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// passar o valor da String 'count' é o mesmo que `state => state.count`")]),t._v("\n    countAlias"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// para acessar o estado local com `this`, uma função normal deve ser usada")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("countPlusLocalState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localCount\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Também podemos passar um "),s("em",[t._v("Array")]),t._v(" de "),s("em",[t._v("Strings")]),t._v(" para "),s("em",[t._v("mapState")]),t._v(" quando o nome de um dado computado mapeado é o mesmo que um nome de árvore secundária do estado.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("computed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mapeia this.count para store.state.count")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"objeto-spread-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#objeto-spread-operator"}},[t._v("#")]),t._v(" Objeto Spread Operator")]),t._v(" "),s("p",[t._v("Observe que "),s("em",[t._v("mapState")]),t._v(" retorna um objeto. Como usá-lo em combinação com outros dados computados locais? Normalmente, teríamos que usar um utilitário para fundir vários objetos em um para que possamos passar o objeto final para "),s("code",[t._v("computado")]),t._v(". No entanto, com o "),s("a",{attrs:{href:"https://github.com/tc39/proposal-object-rest-spread",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spread Operator"),s("OutboundLink")],1),t._v(", podemos simplificar muito a sintaxe:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("computed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("localComputed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mistura isso no objeto externo com o objeto spread operator")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"componentes-ainda-podem-ter-um-estado-local"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentes-ainda-podem-ter-um-estado-local"}},[t._v("#")]),t._v(" Componentes Ainda Podem Ter Um Estado Local")]),t._v(" "),s("p",[t._v("O uso do Vuex não significa que você deve colocar "),s("strong",[t._v("tudo")]),t._v(" no estado do Vuex. Embora colocar mais estado no Vuex torna suas mutações de estado mais explícitas e depuráveis, às vezes também pode tornar o código mais verboso e indireto. Se um pedaço de estado pertence estritamente a um único componente, pode ser bom deixá-lo apenas como um estado local. Você deve pesar os prós e contras e tomar decisões que atendam às necessidades de desenvolvimento da sua aplicação.")])])}),[],!1,null,null,null);a.default=o.exports}}]);